# 최소 힙
import sys

input = sys.stdin.readline
print = sys.stdout.write
heap = [0]


def swap(arr, idx1, idx2):
    arr[idx1], arr[idx2] = arr[idx2], arr[idx1]
    return


def insert_min_heap(x):
    heap.append(x)
    child = len(heap) - 1  # ==heapsize
    while child > 1:
        parent = child // 2
        if heap[child] < heap[parent]:  # 자식이 더 작으면 스왑
            swap(heap, child, parent)
            child = parent
        else:
            break
    return


def get_child_node(parent_node):
    if parent_node * 2 + 1 <= len(heap) - 1:
        if heap[parent_node * 2 + 1] < heap[parent_node * 2]:
            return parent_node * 2 + 1
        else:
            return parent_node * 2
    elif parent_node * 2 == len(heap) - 1:
        return parent_node * 2
    return -1


def del_min_heap():
    if len(heap) == 1:
        return 0
    return_value = heap[1]
    last_node = heap[-1]
    heap[1] = last_node
    heap.pop()

    node = 1
    while 1:
        child = get_child_node(node)
        if child == -1:
            break
        if heap[node] > heap[child]:
            swap(heap, node, child)
            node = child
        else:
            break
    return return_value


N = int(input())
for _ in range(N):
    x = int(input())
    if x == 0:
        print(str(del_min_heap()) + '\n')
    else:
        insert_min_heap(x)
